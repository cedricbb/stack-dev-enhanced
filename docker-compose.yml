version: "3.3"

services:
  mariadb:
    container_name: mariadb
    restart: always
    image: mariadb:10.11
    security_opt:
      - no-new-privileges:true
    environment:
      - MARIADB_ROOT_USER=${DATABASE_ROOT_USER}
      - MARIADB_ROOT_PASSWORD=${DATABASE_ROOT_PASSWORD}
      - MARIADB_ROOT_HOST=%
    volumes:
      - mariadb:/var/lib/mysql
      - ./dumps:/dumps
      - ./configs/mariadb:/etc/prometheus/mariadb:ro
      - ./scripts:/scripts:ro
    ports:
      - 3306:3306
    labels:
      - traefik.enable=false
    networks:
      - db

  traefik:
    container_name: traefik
    image: traefik:v2.10
    command:
      - --api.insecure=false
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.httpchallenge=true
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.myresolver.acme.email=postmaster@localhost
      - --certificatesresolvers.myresolver.acme.storage=/certs/acme.json
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./configs/traefik:/etc/traefik:ro
      - ./certs:/certs:ro
    networks:
      - frontend
    labels:
      - traefik.enable=true
      - traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)
      - traefik.http.routers.dashboard.service=api@internal
      - traefik.http.routers.dashboard.entrypoints=websecure
      - traefik.http.routers.dashboard.tls=true
      - traefik.http.routers.dashboard.middlewares=secure-headers@file
    restart: unless-stopped

  postgres:
    container_name: postgres
    restart: always
    image: postgres:15-alpine
    security_opt:
      - no-new-privileges:true
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_DATABASE_PASSWORD}
      - POSTGRES_USER=${POSTGRES_DATABASE_USER}
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./dumps:/dumps
    ports:
      - 5432:5432
    labels:
      - traefik.enable=false
    networks:
      - db

  redis:
    image: redis:7-alpine
    container_name: redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --save 900 1
      --save 300 10
      --save 60 10000
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - frontend
      - backend
    deploy:
      ressources:
        limits:
          cpus: "0.5"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 256M
    security_opt:
      - no-new-privileges:true
    labels:
      - traefik.enable=false
    restart: always
    ports:
      - 6379:6379

  varnish:
    image: varnish:7.2
    container_name: varnish
    volumes:
      - ./config/varnish/default.vcl:/etc/varnish/default.vcl:ro
    environment:
      - VARNISH_SIZE=2G
    command: -p default_ttl=3600 -p default_grace=3600
    depends_on:
      - traefik
    networks:
      - frontend
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2G
    healthcheck:
      test: ["CMD", "varnishstat", "-1"]
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - traefik.enable=true
      - traefik.http.routers.varnish.rule=Host(`cache.localhost`)
      - traefik.http.services.varnish.loadbalancer.server.port=80

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - 1025:1025
      - 8025:8025
    networks:
      - frontend
      - backend
    labels:
    - traefik.enable=true
    - traefik.http.routers.mailhog.rule=Host(`mailhog.localhost`)
    - treafik.http.services.mailhog.loadbalancer.server.port=8025
    - traefik.http.routers.mailhog.middlewares=secure-headers@file
  deploy:
    resources:
      limits:
        cpus: "0.5"
        memory: 512M

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - backend
      - frontend
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2G
    healthcheck:
    test: ["CMD-SHELL", "curl -s http://localhost:9200 >/dev/null || exit 1"]
    interval: 30s
    timeout: 5s
    retries: 3
  
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.2
    container_name: logstash
    volumes:
      - ./config/logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml:ro
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline:ro
    environment:
      - xpack.monioring.enable=true
    depends_on:
      - elasticsearch
    networks:
      - backend
      - frontend
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
  
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.2
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
    depends_on:
      - elasticsearch
    networks:
      - frontend
    labels:
      - traefik.enable=true
      - traefik.http.routers.kibana.rule=Host(`logs.localhost`)
      - traefik.http.services.kibana.loadbalancer.server.port=5601
    deploy:
    resources:
      limits:
        cpus: "0.5"
        memory: 1G
  
  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    networks:
      - frontend
      - backend
    labels:
      - traefik.enable=true
      - traefik.http.routers.minio.rule=Host(`minio.localhost`)
      - traefik.http.services.minio.loadbalancer.server.port=9000
      - traefik.http.routers.minio-console.rule=Host(`s3-console.localhost`)
      - traefik.http.services.minio-console.loadbalancer.server.port=9001
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_LISTEN_PORT=5050
      - PGADMIN_CONFIG_SERVER_MODE=True
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=True
      - PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=True
      - PGADMIN_CONFIG_LOGIN_BANNER="Secure access via Traefik - Unauthorized access is prohibited"
      - PGADMIN_CONFIG_CONSOLE_LOG_LEVEL=10
      - PGADMIN_CONFIG_PROXY_X_FOR_COUNT=1
      - PGADMIN_CONFIG_PROXY_X_PROTO_COUNT=1
      - PGADMIN_CONFIG_MAX_LOGIN_ATTEMPTS=3
      - PGADMIN_CONFIG_PASSWORD_LENGTH_MIN=8
      - PGADMIN_CONFIG_CHECK_PASSWORD_STRENGTH=True
    networks:
      - db
      - frontend
    labels:
      - traefik.enable=true
      - traefik.http.routers.pgadmin.rule=Host(`pgadmin.localhost`)
      - traefik.http.routers.pgadmin.entrypoints=websecure
      - traefik.http.routers.pgadmin.tls=true
      - traefik.http.services.pgadmin.loadbalancer.server.port=5050
      - traefik.http.routers.pgadmin.middlewares=pgadmin-headers@file,pgadmin-rate@file
    depends_on:
      - postgres
    restart: unless-stopped

  phpmyadmin:
    image: phpmyadmin:latest
    container_name: phpmyadmin
    environment:
      - PMA_HOST=mariadb
      - PMA_PORT=3306
      - PMA_ABSOLUTE_URI=https://phpmyadmin.localhost/
      - APACHE_SERVER_NAME=phpmyadmin.localhost
      - UPLOAD_LIMIT=300M
      - PMA_ARBITRARY=1
    volumes:
      - ./configs/phpmyadmin/apache.conf:/etc/apache2/sites-available/000-default.conf:ro
      - ./configs/phpmyadmin/apache.conf:/etc/apache2/sites-enabled/000-default.conf:ro
    networks:
      - db
      - frontend
    labels:
      - traefik.enable=true
      - traefik.http.routers.phpmyadmin.rule=Host(`phpmyadmin.localhost`)
      - traefik.http.routers.phpmyadmin.entrypoints=websecure
      - traefik.http.routers.phpmyadmin.tls=true
      - traefik.http.services.phpmyadmin.loadbalancer.server.port=80
    depends_on:
      - mariadb
    restart: unless-stopped

  code-server:
    image: codercom/code-server:latest
    environment:
      -VIRTUAL_HOST=ide.internal
      - VIRTUAL_PORT=8080
    volumes:
      - ./workspace:/home/coder/workspace

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    networks:
      - frontend
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=Host(`portainer.localhost`)
      - traefik.http.routers.portainer.entrypoints=websecure
      - traefik.http.routers.portainer.tls=true
      - traefik.http.services.portainer.loadbalancer.server.port=9000
      - traefik.http.routers.portainer.middlewares=secure-headers@file
    restart: unless-stopped

  netdata:
    container_name: netdata
    image: netdata/netdata:latest
    pid: host
    network_mode: host
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    security_opt:
      - no-new-privileges:true
    volumes:
    - netdataconfig:/etc/netdata
    - netdatalib:/var/lib/netdata
    - netdatacache:/var/cache/netdata
    - /etc/passwd:/host/etc/passwd:ro
    - /etc/group:/host/etc/group:ro
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    - /etc/os-release:/host/etc/os-release:ro
    - /var/run/docker.sock:/var/run/docker.sock:ro
  environment:
    - NETDATA_CLAIM_URL=https://app.netdata.cloud
    - NETDATA_CLAIM_TOKEN=${NETDATA_CLAIM_TOKEN}
  labels:
    - traefik.enable=true
    - traefik.http.routers.netdata.rule=Host(`netdata.localhost`)
    - traefik.http.routers.netdata.entrypoints=websecure
    - traefik.http.routers.netdata.tls=true
    - traefik.http.services.netdata.loadbalancer.server.port=19999
    - traefik.http.routers.netdata.middlewares=secure-headers@file

  redis-exporter:
    container_name: redis-exporter
    image: oliver006/redis_exporter:latest
    depends_on:
      - redis
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - frontend
    labels:
      - traefik.enable=true
      - traefik.http.routers.redis-exporter.rule=Host(`redis-exporter.localhost`)
      - traefik.http.routers.redis-exporter.entrypoints=websecure
      - traefik.http.routers.redis-exporter.tls=true
      - traefik.http.services.redis-exporter.loadbalancer.server.port=9121

  postgres-exporter:
    container_name: postgres-exporter
    image: prometheuscommunity/postgres-exporter:latest
    depends_on:
      - postgres
    environment:
      - DATA_SOURCE_NAME=host=postgres user=${POSTGRES_DATABASE_USER} password=${POSTGRES_DATABASE_PASSWORD} dbname=${POSTGRES_DATABASE_NAME} sslmode=disable
    networks:
      - frontend
    labels:
      - traefik.enable=true
      - traefik.http.routers.postgres-exporter.rule=Host(`postgres-exporter.localhost`)
      - traefik.http.routers.postgres-exporter.entrypoints=websecure
      - traefik.http.routers.postgres-exporter.tls=true
      - traefik.http.services.postgres-exporter.loadbalancer.server.port=9187

  mariadb-metrics:
    image: bitnami/mysqld-exporter:latest
    container_name: mariadb-metrics
    command:
     - "--mysqld.username=root:secure_password"
     - "--mysqld.address=127.0.0.1:3306"
    ports:
      - "9104:9104"
    networks:
      - frontend
      - db
    depends_on:
      - mariadb
    labels:
      - traefik.enable=true
      - traefik.http.routers.mariadb-metrics.rule=Host(`mariadb-metrics.localhost`)
      - traefik.http.routers.mariadb-metrics.entrypoints=websecure
      - traefik.http.routers.mariadb-metrics.tls=true
      - traefik.http.services.mariadb-metrics.loadbalancer.server.port=9104

  docs:
    container_name: docs
    build:
      context: ./docs
      dockerfile: Dockerfile
    volumes:
      - ./docs:/docs
    security_opt:
      - no-new-privileges:true
    networks:
      - frontend
    labels:
      - traefik.enable=true
      - traefik.http.routers.docs.rule=Host(`docs.localhost`)
      - traefik.http.routers.docs.entrypoints=websecure
      - traefik.http.routers.docs.tls=true
      - traefik.http.services.docs.loadbalancer.server.port=8000
      - traefik.http.routers.docs.service=docs
      - traefik.http.services.docs-service.loadbalancer.server.scheme=http
      - traefik.http.middlewares.docs-redirect.redirectscheme.scheme=https
      - traefik.http.routers.docs.middlewares=secure-headers@file
    environment:
      - PYTHONUNBUFFERED=1
    restart: unless-stopped

volumes:
  mariadb:
    driver: local
  postgres:
    driver: local
  pgadmin:
    driver: local
  portainer_data:
    driver: local
  netdataconfig:
    driver: local
  netdatalib:
    driver: local
  netdatacache:
    driver: local

networks:
  frontend:
    name: frontend
    external: false
  backend:
    name: backend
    external: false
  db:
    name: db
    external: false